{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Card","props","className","src","monster","id","alt","name","email","CardList","monsters","map","SearchBox","labelName","placeholder","handleChange","htmlFor","type","onChange","App","__getMonsterData__","a","fetch","response","json","monsterListJSON","alert","console","log","onSearchChange","event","setState","searchField","target","value","state","this","then","users","filteredMonsters","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"uWAGaA,G,YAAO,SAACC,GACnB,OACE,yBAAKC,UAAU,kBACb,yBACEC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,0BACHC,IAAI,YAEN,4BAAKL,EAAMG,QAAQG,MACnB,2BAAIN,EAAMG,QAAQI,UCPXC,EAAW,SAACR,GACvB,OACE,yBAAKC,UAAU,aACZD,EAAMS,SAASC,KAAI,SAACP,GACnB,OAAO,kBAAC,EAAD,CAAMA,QAASA,EAASC,GAAID,EAAQC,UCLtCO,G,MAAY,SAAC,GAA8C,IAA5CC,EAA2C,EAA3CA,UAAWC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aAClD,OACE,yBAAKb,UAAU,gBACb,2BAAOc,QAAQ,cAAcH,GAC7B,2BACEI,KAAK,SACLV,KAAK,aACLL,UAAU,SACVY,YAAaA,EACbI,SAAUH,OCyDHI,G,wDA7Db,aAAe,IAAD,8BACZ,gBAQFC,mBATc,sBASO,8BAAAC,EAAA,+EAEMC,MACrB,8CAHe,cAEXC,EAFW,gBAKaA,EAASC,OALtB,cAKXC,EALW,yBAMVA,GANU,kCAQjBC,MAAM,kDACNC,QAAQC,IAAR,8CATiB,0DATP,EAoCdC,eAAiB,SAACC,GAChB,EAAKC,SAAS,CACZC,YAAaF,EAAMG,OAAOC,SAnC5B,EAAKC,MAAQ,CACXzB,SAAU,GACVsB,YAAa,IALH,E,gEAsBO,IAAD,OACEI,KAAKhB,qBACbiB,MAAK,SAACC,GAAD,OACf,EAAKP,SAAS,CACZrB,SAAU4B,S,+BAgBN,IAAD,EAC2BF,KAAKD,MAA/BzB,EADD,EACCA,SAAUsB,EADX,EACWA,YACZO,EAAmB7B,EAAS8B,QAAO,SAACpC,GACxC,OAAOA,EAAQG,KAAKkC,cAAcC,SAASV,EAAYS,kBAGzD,OACE,yBAAKvC,UAAU,OACb,+CACA,kBAAC,EAAD,CACEY,YAAY,kBACZC,aAAcqB,KAAKP,iBAErB,kBAAC,EAAD,CAAUnB,SAAU6B,S,GAxDVI,cCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnB,MAAK,SAAAoB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjC,QAAQiC,MAAMA,EAAMC,c","file":"static/js/main.8fa2baec.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./card.styles.css\";\r\n\r\nexport const Card = (props) => {\r\n  return (\r\n    <div className=\"card-container\">\r\n      <img\r\n        src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}\r\n        alt=\"monster\"\r\n      />\r\n      <h2>{props.monster.name}</h2>\r\n      <p>{props.monster.email}</p>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport \"./card-list.styles.css\";\r\nimport { Card } from \"../card/card.component\";\r\n\r\nexport const CardList = (props) => {\r\n  return (\r\n    <div className=\"card-list\">\r\n      {props.monsters.map((monster) => {\r\n        return <Card monster={monster} id={monster.id} />;\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport \"./search-box.styles.css\";\r\n\r\nexport const SearchBox = ({ labelName, placeholder, handleChange }) => {\r\n  return (\r\n    <div className=\"form-control\">\r\n      <label htmlFor=\"search-box\">{labelName}</label>\r\n      <input\r\n        type=\"search\"\r\n        name=\"search-box\"\r\n        className=\"search\"\r\n        placeholder={placeholder}\r\n        onChange={handleChange}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import React, { Component } from \"react\";\r\n\r\nimport { CardList } from \"./components/card-list/card-list.component\";\r\nimport { SearchBox } from \"./components/search-box/search-box.component\";\r\n\r\nimport \"./App.css\";\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    // Fetch users\r\n    this.state = {\r\n      monsters: [],\r\n      searchField: \"\",\r\n    };\r\n  }\r\n\r\n  __getMonsterData__ = async () => {\r\n    try {\r\n      const response = await fetch(\r\n        \"https://jsonplaceholder.typicode.com/users\"\r\n      );\r\n      const monsterListJSON = await response.json();\r\n      return monsterListJSON;\r\n    } catch (error) {\r\n      alert(`[ERROR]: API Request Failed. Check console.log`);\r\n      console.log(`[ERROR]: API Request Failed: ${error}`);\r\n    }\r\n  };\r\n\r\n  componentDidMount() {\r\n    const monsterList = this.__getMonsterData__();\r\n    monsterList.then((users) =>\r\n      this.setState({\r\n        monsters: users,\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Function to change state for every search entry in the search box\r\n   *\r\n   * @memberof App\r\n   */\r\n  onSearchChange = (event) => {\r\n    this.setState({\r\n      searchField: event.target.value,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { monsters, searchField } = this.state;\r\n    const filteredMonsters = monsters.filter((monster) => {\r\n      return monster.name.toLowerCase().includes(searchField.toLowerCase());\r\n    });\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <h1>Monster Rolodex</h1>\r\n        <SearchBox\r\n          placeholder=\"Search Monsters\"\r\n          handleChange={this.onSearchChange}\r\n        />\r\n        <CardList monsters={filteredMonsters} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}